/*-
 * Copyright (c) 2021 Ruslan Bukin <br@bsdpad.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

MEMORY
{
	flash (rx) : ORIGIN = 0x10000000, LENGTH = 1792k
	cyw43 (rx) : ORIGIN = 0x101c0000, LENGTH = 256k
	sram1 (rwx) : ORIGIN = 0x20000000, LENGTH = 128K
	sram2 (rwx) : ORIGIN = 0x20020000, LENGTH = 128K /* malloc */
}

ENTRY(__start)

SECTIONS
{
	. = 0x10000000;

	.boot2 : {
		__boot2_start__ = .;
		KEEP(*(.boot2))
		__boot2_end__ = .;
	} > flash

	ASSERT(__boot2_end__ - __boot2_start__ == 256,
	    "ERROR: Pico second stage bootloader must be 256 bytes in size")

	.start . : {
		*start.o(.text)
	} > flash

	.text : {
		*(.text)
	} > flash

	.rodata : {
		*(.rodata)
	} > flash

	.ARM.exidx : {
		*(.ARM.exidx)
	} > flash

	.rodata.str1.1 : {
		*(.rodata.str1.1)
	} > flash

	/* Ensure _smem is associated with the next section */
	. = .;
	_smem = ABSOLUTE(.);
	.data : {
		_sdata = ABSOLUTE(.);
		*(.data)

		__start_set_sysinit_set = ABSOLUTE(.);
		*(set_sysinit*)
		__stop_set_sysinit_set = ABSOLUTE(.);

		_edata = ABSOLUTE(.);

	} > sram1 AT > flash

	.bss : {
		_sbss = ABSOLUTE(.);
		*(.bss COMMON)
		*(.sbss)
		_ebss = ABSOLUTE(.);
	} > sram1

	_emem = ABSOLUTE(.);

	fw_43439A0_7_95_49_00_start = 0x101c0000;
}
